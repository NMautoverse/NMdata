% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NMdataConf.R
\name{NMdataConf}
\alias{NMdataConf}
\title{Configure default behavior of NMdata functions}
\usage{
NMdataConf(...)
}
\arguments{
\item{...}{NMdata options to modify, like for base::options. See examples for how
    to use. Parameters that can be controlled are
\itemize{

\item{as.fun} A function that will be applied to data returned by various
data reading functions (NMscanData, NMreadTab, NMreadCSV, NMscanInput,
NMscanTables). Also, data processing functions like mergeCheck, findCovs,
findVars, flagsAssign, flagsCount take this into account, but slightly
differently. For these functions that take data as arguments, the as.fun
configuration is only taken into account if a the data passed to the
functions are not of class data.table. The argument as.fun to these
functions is always adhered to. Pass an actual function, say
as.fun=tibble::as_tibble. If you want data.table, use as.fun="data.table"
(not a function).

\item{check.time} Logical, applies to NMscanData only. NMscanData by
defaults checks if output control stream is newer than input control stream
and input data. Set this to FALSE if you are in an environment where time
stamps cannot be relied on.

\item{file.mod} A function that will derive the path to the input control
stream based on the path to the output control stream. Technically, it can
be a string too, but when using NMdataConf, this would make little sense
because it would direct all output control streams to the same input control
streams.

\item{modelname} A function that will translate the output control stream
path to a model name. Default is to strip .lst, so /path/to/run1.lst will
become run1. Technically, it can be a string too, but when using NMdataConf,
this would make little sense because it would translate all output control
streams model name.

}}
}
\description{
Allows to change default behavior across the functions in NMdata rather than
typing the arguments in all function calls. Only some options can be
controlled here, and they are typically the ones that are characterized by
the way you interact with Nonmem or standard organization of your
data. Also, you can control what data class to return (say data.tables or
tibbles if you prefer one of those over data.frames). Recommendation: Use
this function transparently in the code and not in a configuration file
hidden from other users.
}
\examples{
## get current defaults
NMdataConf()
## change a parameter
NMdataConf(check.time=FALSE)
## reset one parameter to default value
NMdataConf(modelname=NULL)
## reset all parameters to defaults
NMdataConf(reset=TRUE)
}
