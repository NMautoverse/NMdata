% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mergeCheck.R
\name{mergeCheck}
\alias{mergeCheck}
\title{Merge, order, and check resulting rows and columns.}
\usage{
mergeCheck(
  x,
  y,
  by,
  by.x,
  by.y,
  fun.commoncols = base::warning,
  ncols.expect,
  track.msg = FALSE,
  quiet,
  df1,
  df2,
  fun.na.by = base::stop,
  as.fun,
  ...
)
}
\arguments{
\item{x}{A data.frame with the number of rows must should be
obtained from the merge. The resulting data.frame will be
ordered like x.}

\item{y}{A data.frame that will be merged onto x.}

\item{by}{The column(s) to merge by. Character string (vector). by
or by.x and by.y must be supplied.}

\item{by.x}{If the columns to merge by in x and y are named
differently. by or by.x and by.y must be supplied.}

\item{by.y}{If the columns to merge by in x and y are named
differently. by or by.x and by.y must be supplied.}

\item{fun.commoncols}{If common columns are found in x and y, and
they are not used in by, this will create columns named like
col.x and col.y in result (see ?merge). Often, this is a
mistake, and the default is to throw a warning if this
happens. If using mergeCheck in a function, you may want to
make sure this is not happening and use
fun.commoncols=stop. If you want nothing to happen, you can do
fun.commoncols=NULL.}

\item{ncols.expect}{If you want to include a check of the number
of columns being added to the dimensions of x. So if
ncols.expect=1, the resulting data must have exactly one
column more than x - if not, an error will be returned.}

\item{track.msg}{If using mergeCheck inside other functions, it
can be useful to use track.msg=TRUE. This will add information
to messages/warnings/errors that they came from mergCheck.}

\item{quiet}{If FALSE, the names of the added columns are
reported. Default value controlled by NMdataConf.}

\item{df1}{Deprecated. Use x.}

\item{df2}{Deprecated. Use y.}

\item{fun.na.by}{If NA's are found in by columns in both x and
why, what should we do? This could be OK, but in many cases,
it's because something unexpected is happening. Use
fun.na.by=NULL in cases where you really don't care about
this.}

\item{as.fun}{The default is to return a data.table if x is a
data.table and return a data.frame in all other cases. Pass a
function in as.fun to convert to something else.}

\item{...}{additional arguments passed to data.table::merge. If
all is among them, an error will be returned.}
}
\value{
a data.frame resulting from merging x and y. Class as
    defined by as.fun.
}
\description{
This function is a useful wrapper for merges where x will be
extended with columns from y, i.e. all rows in x are retained,
and no new rows can be created. For this very common type of
(simple) merges, mergeCheck does the merge and ensures that
exactly this and nothing else happened. Notice, mergeCheck passes
the hard work to merge.data.table, the contributions lies in
checking that the results are consistent with the simple merge
described above.
}
\details{
Besides merging and checking rows, mergeCheck makes sure
    the order in x is retained in the resulting data (both rows
    and column order). Also, a warning is given if column names
    are overlapping, making merge create new column names like
    col.x and col.y. Merges and other operations are done using
    data.table. If x is a data.frame (and not a data.table), it
    will internally be converted to a data.table, and the
    resulting data.table will be converted back to a data.frame
    before returning.
}
\seealso{
Other DataCreate: 
\code{\link{NMorderColumns}()},
\code{\link{NMstamp}()},
\code{\link{findCovs}()},
\code{\link{findVars}()},
\code{\link{flagsAssign}()},
\code{\link{flagsCount}()},
\code{\link{tmpcol}()}
}
\concept{DataCreate}
